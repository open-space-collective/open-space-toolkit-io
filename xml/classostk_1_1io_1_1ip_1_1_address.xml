<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classostk_1_1io_1_1ip_1_1_address" kind="class" language="C++" prot="public">
    <compoundname>ostk::io::ip::Address</compoundname>
    <includes refid="_address_8hpp" local="no">Address.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695" prot="public" static="no" strong="yes">
        <type></type>
        <name>Type</name>
        <enumvalue id="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695aec0fc0100c4fc1ce4eea230c3dc10360" prot="public">
          <name>Undefined</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695a42a9137a05a60eb752dcdf982e717626" prot="public">
          <name>IPv4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695afdb7cb8f657426e7c409bfd6d1a36ce4" prot="public">
          <name>IPv6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="25" column="1" bodyfile="include/OpenSpaceToolkit/IO/IP/Address.hpp" bodystart="24" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a4118f42388b11fb003c9fb782f4ca04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::io::ip::Address::Address</definition>
        <argsstring>()=delete</argsstring>
        <name>Address</name>
        <briefdescription>
<para>Default constructor (disabled) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a003f6a3d8c0c53a27a72cbb7a5cabdca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::io::ip::Address::Address</definition>
        <argsstring>(const Address &amp;anAddress)</argsstring>
        <name>Address</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> &amp;</type>
          <declname>anAddress</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>An IP address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="41" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1abd301573be1c4ea9f2dbed8556654304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::io::ip::Address::~Address</definition>
        <argsstring>()</argsstring>
        <name>~Address</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a2154bcedb7622c8e1813e45efcdaaa95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> &amp;</type>
        <definition>Address&amp; ostk::io::ip::Address::operator=</definition>
        <argsstring>(const Address &amp;anAddress)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> &amp;</type>
          <declname>anAddress</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>An IP address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="52" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1ad5133a34558d6e70356d635429e2529b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::operator==</definition>
        <argsstring>(const Address &amp;anAddress) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> &amp;</type>
          <declname>anAddress</declname>
        </param>
        <briefdescription>
<para>Equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;0.0.0.0&quot;)<sp/>==<sp/>Address::Parse(&quot;0.0.0.0&quot;)<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>An IP address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if addresses are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1ae9cde5193e1957664d3c51b77d38f3f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::operator!=</definition>
        <argsstring>(const Address &amp;anAddress) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> &amp;</type>
          <declname>anAddress</declname>
        </param>
        <briefdescription>
<para>Not equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;0.0.0.0&quot;)<sp/>!=<sp/>Address::Parse(&quot;0.0.0.1&quot;)<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>An IP address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if addresses are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a04478bd4c7c226c0fe7043ef63ec48d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
<para>Check if address is defined. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Parse(&quot;0.0.0.0&quot;)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.isDefined()<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if address is defined </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="98" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1aed5c82ceb025f23bcf17b5a76f1c4758" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isLoopback</definition>
        <argsstring>() const</argsstring>
        <name>isLoopback</name>
        <briefdescription>
<para>Returns true if address is loopback. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;127.0.0.1&quot;).isLoopback()<sp/>;<sp/>//<sp/>True</highlight></codeline>
<codeline><highlight class="normal">Address::Parse(&quot;::1&quot;).isLoopback()<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if address is loopback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1ae099697de04ec30bac8f9d371ec02e14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isWildcard</definition>
        <argsstring>() const</argsstring>
        <name>isWildcard</name>
        <briefdescription>
<para>Returns true if address is wildcard (all zero) </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;0.0.0.0&quot;).isWildcard()<sp/>;<sp/>//<sp/>True</highlight></codeline>
<codeline><highlight class="normal">Address::Parse(&quot;::&quot;).isWildcard()<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if address is wildcard </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="120" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a8e4414026c04ae1143f3a388d025de53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isLinkLocal</definition>
        <argsstring>() const</argsstring>
        <name>isLinkLocal</name>
        <briefdescription>
<para>Returns true if address is link local unicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                IPv4 link local addresses are in the 169.254.0.0/16 range, according to RFC 3927.
                IPv6 link local addresses have 1111 1110 10 as the first 10 bits, followed by 54 zeros.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is link local unicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="129" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a90251b4663992d0e64d3708da55006a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isBroadcast</definition>
        <argsstring>() const</argsstring>
        <name>isBroadcast</name>
        <briefdescription>
<para>Returns true if IP address is broadcast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                Only IPv4 addresses can be broadcast addresses. In a broadcast address, all bits are one.
                For an IPv6 address, returns always false.
</verbatim></para>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;255.255.255.255&quot;).isBroadcast()<sp/>;<sp/>//<sp/>True</highlight></codeline>
<codeline><highlight class="normal">Address::Parse(&quot;::&quot;).isBroadcast()<sp/>;<sp/>//<sp/>False</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if address is broadcast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="143" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a5e8adc78088668c77ab9ddf486892a85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isUnicast</definition>
        <argsstring>() const</argsstring>
        <name>isUnicast</name>
        <briefdescription>
<para>Returns true if address is unicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                An address is unicast if it is neither a wildcard, broadcast or multicast address.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is unicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="151" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1aee49b8e42c67256b4627f29126bb1209" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isMulticast</name>
        <briefdescription>
<para>Returns true if address is multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                IPv4 multicast addresses are in the 224.0.0.0 to 239.255.255.255 range (the first four bits
                have the value 1110). IPv6 multicast addresses are in the FFxx:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="160" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a86687f373b37c64f4692465de5e96f26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isGlobalMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isGlobalMulticast</name>
        <briefdescription>
<para>Returns true if address is global multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4, global multicast addresses are in the 224.0.1.0 to 238.255.255.255 range.
                For IPv6, global multicast addresses are in the FFxF:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is global multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="169" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a90befc1694794a5608eb307715056d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isLinkLocalMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isLinkLocalMulticast</name>
        <briefdescription>
<para>Returns true if address is link-local multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4, link-local multicast addresses are in the 224.0.0.0/24 range.
                For IPv6, link-local multicast addresses are in the FFx2:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is link-local multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="178" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1abc097099261de731a2478073b2cc14d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isNodeLocalMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isNodeLocalMulticast</name>
        <briefdescription>
<para>Returns true if address is node-local multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                IPv4 does not support node-local addresses, thus the result is always false for an IPv4
                address. For IPv6, node-local multicast addresses are in the FFx1:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is node-local multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="187" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1afcee80f65426fbe4118df48e13f3b3f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isOrgLocalMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isOrgLocalMulticast</name>
        <briefdescription>
<para>Returns true if address is organization-local multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4, organization-local multicast addresses are in the 239.192.0.0/16 range.
                For IPv6, organization-local multicast addresses are in the FFx8:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is organization-local multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="196" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a45d624593229bcba43e0724cd4a06c1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isSiteLocal</definition>
        <argsstring>() const</argsstring>
        <name>isSiteLocal</name>
        <briefdescription>
<para>Returns true if address is site local unicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                IPv4 site local addresses are in on of the 10.0.0.0/24, 192.168.0.0/16 or 172.16.0.0 to
                172.31.255.255 ranges. Originally, IPv6 site-local addresses had FEC0/10 (1111 1110 11)
                prefix (RFC 4291), followed by 38 zeros. Interfaces using this mask are supported, but
                obsolete; RFC 4193 prescribes fc00::/7 (1111 110) as local unicast prefix.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is site local unicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="207" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a44e4d6cf1714b01dbb0d4b7042ad8366" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isSiteLocalMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isSiteLocalMulticast</name>
        <briefdescription>
<para>Returns true if address is site-local multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4, site local multicast addresses are in the 239.255.0.0/16 range.
                For IPv6, site-local multicast addresses are in the FFx5:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is site-local multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="216" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1ac76c961e27406418258aa525f805b1e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isWellKnownMulticast</definition>
        <argsstring>() const</argsstring>
        <name>isWellKnownMulticast</name>
        <briefdescription>
<para>Returns true if address is well-known multicast. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4, well-known multicast addresses are in the 224.0.0.0/8 range.
                For IPv6, well-known multicast addresses are in the FF0x:x:x:x:x:x:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is well-known multicast </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="225" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a3a555f0509c7ec00ed45fbd09f993414" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isIPv4Compatible</definition>
        <argsstring>() const</argsstring>
        <name>isIPv4Compatible</name>
        <briefdescription>
<para>Returns true if address is IPv4 compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4 addresses, this is always true.
                For IPv6, the address must be in the ::x:x range (the first 96 bits are zero).
</verbatim></para>
<para><simplesect kind="return"><para>True if address is IPv4 compatible </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="234" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a3967d2bd177d2d14d8245e714af328da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::ip::Address::isIPv4Mapped</definition>
        <argsstring>() const</argsstring>
        <name>isIPv4Mapped</name>
        <briefdescription>
<para>Returns true if address is an IPv4 mapped IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                For IPv4 addresses, this is always true.
                For IPv6, the address must be in the ::FFFF:x:x range.
</verbatim></para>
<para><simplesect kind="return"><para>True if address is an IPv4 mapped IPv6 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="243" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1ab1e396075b2db78542e9312479c9a9a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695" kindref="member">Address::Type</ref></type>
        <definition>Address::Type ostk::io::ip::Address::getType</definition>
        <argsstring>() const</argsstring>
        <name>getType</name>
        <briefdescription>
<para>Get address type. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;0.0.0.0&quot;).getType()<sp/>;<sp/>//<sp/>Address::Type::IPv4</highlight></codeline>
<codeline><highlight class="normal">Address::Parse(&quot;::&quot;).getType()<sp/>;<sp/>//<sp/>Address::Type::IPv6</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="254" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a3dde4b2601d3c2be6a6ab6af3663fa1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceostk_1_1io_1_1ip_1ae2b249d594f3ad32fab94162e284875e" kindref="member">String</ref></type>
        <definition>String ostk::io::ip::Address::getString</definition>
        <argsstring>() const</argsstring>
        <name>getString</name>
        <briefdescription>
<para>Get address string representation. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address::Parse(&quot;1.2.3.4&quot;).getString()<sp/>;<sp/>//<sp/>&quot;1.2.3.4&quot;</highlight></codeline>
<codeline><highlight class="normal">Address::Parse(&quot;::&quot;).getString()<sp/>;<sp/>//<sp/>&quot;::&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> string representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="265" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classostk_1_1io_1_1ip_1_1_address_1acb0766764bb037acde8e0acdfdecadd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;anOutputStream, const Address &amp;anAddress)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>anOutputStream</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> &amp;</type>
          <declname>anAddress</declname>
        </param>
        <briefdescription>
<para>Output stream operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Parse(&quot;0.0.0.0&quot;)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>address<sp/>;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anOutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>An output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">anAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>An IP address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="87" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a3e429f06ca69746fb73c155a8a4857b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::Undefined</definition>
        <argsstring>()</argsstring>
        <name>Undefined</name>
        <briefdescription>
<para>Constructs an undefined address. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Undefined()<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.isDefined()<sp/>;<sp/>//<sp/>False</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Undefined address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="276" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1af632da7f131b2a6649d2927ebb6ba60c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::Loopback</definition>
        <argsstring>(const Address::Type &amp;aType)</argsstring>
        <name>Loopback</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695" kindref="member">Address::Type</ref> &amp;</type>
          <declname>aType</declname>
        </param>
        <briefdescription>
<para>Constructs a loopback address. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Loopback(Address::Type::IPv4)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.getString()<sp/>;<sp/>//<sp/>&quot;127.0.0.1&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Loopback address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="287" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a03652b01913b86e80d8a2a363626849a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::Broadcast</definition>
        <argsstring>()</argsstring>
        <name>Broadcast</name>
        <briefdescription>
<para>Constructs a broadcast address. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Broadcast()<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.getString()<sp/>;<sp/>//<sp/>&quot;255.255.255.255&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Broadcast address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="298" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a495956892a4815139c94377c0267125d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::IPv4</definition>
        <argsstring>(const uint8_t &amp;aFirstGroup, const uint8_t &amp;aSecondGroup, const uint8_t &amp;aThirdGroup, const uint8_t &amp;aFourthGroup)</argsstring>
        <name>IPv4</name>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>aFirstGroup</declname>
        </param>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>aSecondGroup</declname>
        </param>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>aThirdGroup</declname>
        </param>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>aFourthGroup</declname>
        </param>
        <briefdescription>
<para>Constructs an IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::IPv4(1,<sp/>2,<sp/>3,<sp/>4)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.getString()<sp/>;<sp/>//<sp/>&quot;1.2.3.4&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>IPv4 address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="309" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1abea1656b0c0edc9af3ba9b51a485a44b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::IPv4</definition>
        <argsstring>(const uint32_t &amp;anAddress)</argsstring>
        <name>IPv4</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>anAddress</declname>
        </param>
        <briefdescription>
<para>Constructs an IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::IPv4(0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.getString()<sp/>;<sp/>//<sp/>&quot;0.0.0.0&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>IPv4 address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="322" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a3f41fa50dd97310ed8d88e5097b9c038" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::IPv6</definition>
        <argsstring>(const uint16_t &amp;aFirstGroup, const uint16_t &amp;aSecondGroup, const uint16_t &amp;aThirdGroup, const uint16_t &amp;aFourthGroup, const uint16_t &amp;aFifthGroup, const uint16_t &amp;aSixthGroup, const uint16_t &amp;aSeventhGroup, const uint16_t &amp;anEighthGroup)</argsstring>
        <name>IPv6</name>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aFirstGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aSecondGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aThirdGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aFourthGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aFifthGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aSixthGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>aSeventhGroup</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>anEighthGroup</declname>
        </param>
        <briefdescription>
<para>Constructs an IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::IPv6(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">address.getString()<sp/>;<sp/>//<sp/>&quot;::&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>IPv6 address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="333" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1ip_1_1_address_1a3d60e44d816e30f17db36f9bb7ac6307" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref></type>
        <definition>static Address ostk::io::ip::Address::Parse</definition>
        <argsstring>(const String &amp;aString)</argsstring>
        <name>Parse</name>
        <param>
          <type>const <ref refid="namespaceostk_1_1io_1_1ip_1ae2b249d594f3ad32fab94162e284875e" kindref="member">String</ref> &amp;</type>
          <declname>aString</declname>
        </param>
        <briefdescription>
<para>Constructs an address from a given string. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Parse(&quot;1.2.3.4&quot;)<sp/>;<sp/>//<sp/>IPv4</highlight></codeline>
<codeline><highlight class="normal">Address<sp/>address<sp/>=<sp/>Address::Parse(&quot;::&quot;)<sp/>;<sp/>//<sp/>IPv6</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aString</parametername>
</parameternamelist>
<parameterdescription>
<para>A string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classostk_1_1io_1_1ip_1_1_address" kindref="compound">Address</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="354" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Internet Protocol (IP) address. </para>
    </briefdescription>
    <detaileddescription>
<para><ulink url="https://en.wikipedia.org/wiki/IP_address">https://en.wikipedia.org/wiki/IP_address</ulink> </para>
    </detaileddescription>
    <location file="include/OpenSpaceToolkit/IO/IP/Address.hpp" line="22" column="1" bodyfile="include/OpenSpaceToolkit/IO/IP/Address.hpp" bodystart="21" bodyend="358"/>
    <listofallmembers>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a4118f42388b11fb003c9fb782f4ca04f" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Address</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a003f6a3d8c0c53a27a72cbb7a5cabdca" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Address</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a03652b01913b86e80d8a2a363626849a" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Broadcast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a3dde4b2601d3c2be6a6ab6af3663fa1a" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>getString</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1ab1e396075b2db78542e9312479c9a9a5" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>getType</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a495956892a4815139c94377c0267125d" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>IPv4</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1abea1656b0c0edc9af3ba9b51a485a44b" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>IPv4</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a3f41fa50dd97310ed8d88e5097b9c038" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>IPv6</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a90251b4663992d0e64d3708da55006a9" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isBroadcast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a04478bd4c7c226c0fe7043ef63ec48d1" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isDefined</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a86687f373b37c64f4692465de5e96f26" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isGlobalMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a3a555f0509c7ec00ed45fbd09f993414" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isIPv4Compatible</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a3967d2bd177d2d14d8245e714af328da" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isIPv4Mapped</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a8e4414026c04ae1143f3a388d025de53" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isLinkLocal</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a90befc1694794a5608eb307715056d2d" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isLinkLocalMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1aed5c82ceb025f23bcf17b5a76f1c4758" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isLoopback</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1aee49b8e42c67256b4627f29126bb1209" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1abc097099261de731a2478073b2cc14d9" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isNodeLocalMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1afcee80f65426fbe4118df48e13f3b3f9" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isOrgLocalMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a45d624593229bcba43e0724cd4a06c1f" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isSiteLocal</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a44e4d6cf1714b01dbb0d4b7042ad8366" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isSiteLocalMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a5e8adc78088668c77ab9ddf486892a85" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isUnicast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1ac76c961e27406418258aa525f805b1e4" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isWellKnownMulticast</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1ae099697de04ec30bac8f9d371ec02e14" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>isWildcard</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1af632da7f131b2a6649d2927ebb6ba60c" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Loopback</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1ae9cde5193e1957664d3c51b77d38f3f3" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>operator!=</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1acb0766764bb037acde8e0acdfdecadd0" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>operator&lt;&lt;</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a2154bcedb7622c8e1813e45efcdaaa95" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>operator=</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1ad5133a34558d6e70356d635429e2529b" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>operator==</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a3d60e44d816e30f17db36f9bb7ac6307" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Parse</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a03b78ae8f7ddbb893d7396e6a1baf695" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Type</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1a3e429f06ca69746fb73c155a8a4857b7" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>Undefined</name></member>
      <member refid="classostk_1_1io_1_1ip_1_1_address_1abd301573be1c4ea9f2dbed8556654304" prot="public" virt="non-virtual"><scope>ostk::io::ip::Address</scope><name>~Address</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
