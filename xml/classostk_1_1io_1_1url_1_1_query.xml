<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classostk_1_1io_1_1url_1_1_query" kind="class" language="C++" prot="public">
    <compoundname>ostk::io::url::Query</compoundname>
    <includes refid="_query_8hpp" local="no">Query.hpp</includes>
    <innerclass refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter" prot="public">ostk::io::url::Query::Parameter</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classostk_1_1io_1_1url_1_1_query_1a64eb73f998c55a48d25b4ce116d66f1a" prot="public" static="no">
        <type>Array&lt; <ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter" kindref="compound">Query::Parameter</ref> &gt;::<ref refid="classostk_1_1io_1_1url_1_1_query_1a64eb73f998c55a48d25b4ce116d66f1a" kindref="member">ConstIterator</ref></type>
        <definition>typedef Array&lt;Query::Parameter&gt;::ConstIterator ostk::io::url::Query::ConstIterator</definition>
        <argsstring></argsstring>
        <name>ConstIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="120" column="35" bodyfile="include/OpenSpaceToolkit/IO/URL/Query.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classostk_1_1io_1_1url_1_1_query_1a1964a40bee58dce1f39be0aaaedd14b0" prot="private" static="no" mutable="no">
        <type>Array&lt; <ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter" kindref="compound">Query::Parameter</ref> &gt;</type>
        <definition>Array&lt;Query::Parameter&gt; ostk::io::url::Query::parameters_</definition>
        <argsstring></argsstring>
        <name>parameters_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="244" column="11" bodyfile="include/OpenSpaceToolkit/IO/URL/Query.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a10299b6b445c39886d6b689c14364fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::io::url::Query::Query</definition>
        <argsstring>(const Array&lt; Query::Parameter &gt; &amp;aParameterArray)</argsstring>
        <name>Query</name>
        <param>
          <type>const Array&lt; <ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter" kindref="compound">Query::Parameter</ref> &gt; &amp;</type>
          <declname>aParameterArray</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query<sp/>query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;},<sp/>{&quot;Key<sp/>B&quot;,<sp/>&quot;Value<sp/>B&quot;}})<sp/>;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aParameterArray</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="130" column="5" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a2e971d5f134f3229f136b62a5218a9cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::url::Query::operator==</definition>
        <argsstring>(const Query &amp;aQuery) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1url_1_1_query" kindref="compound">Query</ref> &amp;</type>
          <declname>aQuery</declname>
        </param>
        <briefdescription>
<para>Equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;},<sp/>{&quot;Key<sp/>B&quot;,<sp/>&quot;Value<sp/>B&quot;}})<sp/>==<sp/>Query({{&quot;Key<sp/>B&quot;,<sp/>&quot;Value<sp/>B&quot;},<sp/>{&quot;Key</highlight></codeline>
<codeline><highlight class="normal">A&quot;,<sp/>&quot;Value<sp/>A&quot;}})<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aQuery</parametername>
</parameternamelist>
<parameterdescription>
<para>A query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if queries are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="142" column="10" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a13c472bd1b80a7ebccec0eeaae327154" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::url::Query::operator!=</definition>
        <argsstring>(const Query &amp;aQuery) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1url_1_1_query" kindref="compound">Query</ref> &amp;</type>
          <declname>aQuery</declname>
        </param>
        <briefdescription>
<para>Not equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;},<sp/>{&quot;Key<sp/>B&quot;,<sp/>&quot;Value<sp/>B&quot;}})<sp/>!=<sp/>Query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;},<sp/>{&quot;Key</highlight></codeline>
<codeline><highlight class="normal">B&quot;,<sp/>&quot;Value<sp/>C&quot;}})<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aQuery</parametername>
</parameternamelist>
<parameterdescription>
<para>A query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if queries are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="154" column="10" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1aae898ea9a490fe19a500cf33e2fc9921" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::url::Query::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
<para>Check if query is defined. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;},<sp/>{&quot;Key<sp/>B&quot;,<sp/>&quot;Value<sp/>B&quot;}}).isDefined()<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if query is defined </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="164" column="10" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a58d1738acbe0d1c2fa329245f7a75eb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::io::url::Query::hasParameterWithName</definition>
        <argsstring>(const Query::Parameter::Name &amp;aName) const</argsstring>
        <name>hasParameterWithName</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter_1ad176899a3555e0d0efeb0c13f73a8a80" kindref="member">Query::Parameter::Name</ref> &amp;</type>
          <declname>aName</declname>
        </param>
        <briefdescription>
<para>Check if query has parameter with a given name. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;}}).hasParameterWithName(&quot;Key<sp/>A&quot;)<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aName</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if query has parameter with a given name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="175" column="10" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="76" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1ac55b9803b0807160ea5aa42912b412b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceostk_1_1io_1af6dc4ebd6d726ecbeeea63247160b8c0" kindref="member">String</ref></type>
        <definition>String ostk::io::url::Query::getParameterWithName</definition>
        <argsstring>(const Query::Parameter::Name &amp;aName) const</argsstring>
        <name>getParameterWithName</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter_1ad176899a3555e0d0efeb0c13f73a8a80" kindref="member">Query::Parameter::Name</ref> &amp;</type>
          <declname>aName</declname>
        </param>
        <briefdescription>
<para>Get parameter with a given name. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;}}).getParameterWithName(&quot;Key<sp/>A&quot;)<sp/>;<sp/>//<sp/>&quot;Value<sp/>A&quot;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aName</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter" kindref="compound">Parameter</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="186" column="12" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="94" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1aca282853530302e594b16700c83169d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceostk_1_1io_1af6dc4ebd6d726ecbeeea63247160b8c0" kindref="member">String</ref></type>
        <definition>String ostk::io::url::Query::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Get serialized query. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query({{&quot;Key&quot;,<sp/>&quot;Value&quot;}}).toString()<sp/>;<sp/>//<sp/>&quot;?Key=Value&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Serialized query </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="196" column="12" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="114" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a6c40e85de4a1a42ec5c8ee268e074e6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1url_1_1_query_1a64eb73f998c55a48d25b4ce116d66f1a" kindref="member">Query::ConstIterator</ref></type>
        <definition>Query::ConstIterator ostk::io::url::Query::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Get begin const iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Begin const iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="202" column="26" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a94eb24357dcf96fb9926903019b057da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1url_1_1_query_1a64eb73f998c55a48d25b4ce116d66f1a" kindref="member">Query::ConstIterator</ref></type>
        <definition>Query::ConstIterator ostk::io::url::Query::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Get end const iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>End const iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="208" column="26" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a9937aa1e0a99c2f2fd78ec9795f1f2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ostk::io::url::Query::addParameter</definition>
        <argsstring>(const Query::Parameter &amp;aParameter)</argsstring>
        <name>addParameter</name>
        <param>
          <type>const <ref refid="classostk_1_1io_1_1url_1_1_query_1_1_parameter" kindref="compound">Query::Parameter</ref> &amp;</type>
          <declname>aParameter</declname>
        </param>
        <briefdescription>
<para>Add parameter to query. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query<sp/>query({{&quot;Key<sp/>A&quot;,<sp/>&quot;Value<sp/>A&quot;}})<sp/>;</highlight></codeline>
<codeline><highlight class="normal">query.addParameter({&quot;Key<sp/>B&quot;,<sp/>&quot;Value<sp/>B&quot;})<sp/>;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="219" column="10" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="141" bodyend="149"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1a25f41e04f41e40fd63519e377829323f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1url_1_1_query" kindref="compound">Query</ref></type>
        <definition>Query ostk::io::url::Query::Undefined</definition>
        <argsstring>()</argsstring>
        <name>Undefined</name>
        <briefdescription>
<para>Constructs an undefined query. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query<sp/>query<sp/>=<sp/>Query::Undefined()<sp/>;</highlight></codeline>
<codeline><highlight class="normal">query.isDefined()<sp/>;<sp/>//<sp/>False</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Undefined query </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="230" column="18" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1io_1_1url_1_1_query_1aa61f25b072cbbe0973142fdf283bf499" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1io_1_1url_1_1_query" kindref="compound">Query</ref></type>
        <definition>Query ostk::io::url::Query::Parse</definition>
        <argsstring>(const String &amp;aString)</argsstring>
        <name>Parse</name>
        <param>
          <type>const <ref refid="namespaceostk_1_1io_1af6dc4ebd6d726ecbeeea63247160b8c0" kindref="member">String</ref> &amp;</type>
          <declname>aString</declname>
        </param>
        <briefdescription>
<para>Constructs query from a given string. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Query<sp/>query<sp/>=<sp/>Query::Parse(&quot;key_A=value_A&amp;key_B=value_B&quot;)<sp/>;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aString</parametername>
</parameternamelist>
<parameterdescription>
<para>A string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classostk_1_1io_1_1url_1_1_query" kindref="compound">Query</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="241" column="18" bodyfile="src/OpenSpaceToolkit/IO/URL/Query.cpp" bodystart="156" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Uniform Resource Locator (<ref refid="classostk_1_1io_1_1_u_r_l" kindref="compound">URL</ref>) query. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/OpenSpaceToolkit/IO/URL/Query.hpp" line="22" column="1" bodyfile="include/OpenSpaceToolkit/IO/URL/Query.hpp" bodystart="21" bodyend="245"/>
    <listofallmembers>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a9937aa1e0a99c2f2fd78ec9795f1f2df" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>addParameter</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a6c40e85de4a1a42ec5c8ee268e074e6f" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>begin</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a64eb73f998c55a48d25b4ce116d66f1a" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>ConstIterator</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a94eb24357dcf96fb9926903019b057da" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>end</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1ac55b9803b0807160ea5aa42912b412b4" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>getParameterWithName</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a58d1738acbe0d1c2fa329245f7a75eb5" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>hasParameterWithName</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1aae898ea9a490fe19a500cf33e2fc9921" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>isDefined</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a13c472bd1b80a7ebccec0eeaae327154" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>operator!=</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a2e971d5f134f3229f136b62a5218a9cd" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>operator==</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a1964a40bee58dce1f39be0aaaedd14b0" prot="private" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>parameters_</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1aa61f25b072cbbe0973142fdf283bf499" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>Parse</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a10299b6b445c39886d6b689c14364fe1" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>Query</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1aca282853530302e594b16700c83169d9" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>toString</name></member>
      <member refid="classostk_1_1io_1_1url_1_1_query_1a25f41e04f41e40fd63519e377829323f" prot="public" virt="non-virtual"><scope>ostk::io::url::Query</scope><name>Undefined</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
